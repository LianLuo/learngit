1. -- 查看GIT中的全局账号和邮件
git config --global user.name
git config --global user.email

2. -- 如果是window用户，默认首次打开Git是在C盘下面，如果我们需要切换到其他盘符，可以用
cd /E/
pwd
ls
ls -ah  --显示. 和.. 的目录

3. -- 添加一个文件到git本地仓库中
git add readme.txt
git add <file>

4. -- 提交到本地
git commit -m "wrote a readme file" -- -m 后面输入的是本次提交的文件说明，任何字符都行，最好是有意义的。
git commit -m <message>

5. --git status命令可以让我们时刻掌握仓库的当前状态。
git status

6. -- 查看git中具体某个文件修改了什么
git diff readme.txt

7. 提交修改和提交新文件一样，需要两步，一步是add一步是commit
git add readme.txt
git commit -m "commit message".

8. 查询所有提交记录
git log --pretty=oneline

9. git 中用HEAD表示当前版本，上一个版本用HEAD^，上上一个版本用HEAD^^

10.回退到上一个版本
git reset --hard HEAD^

我们回到具体版本中，需要用commit id进行处理，如果我们使用了git reset --hard HEAD^,并且关闭了 git 窗体，如果可以恢复到下一个版本呢？
我们需要使用的是git relog,这个命令记录了我们的每次输入的命令。通过命令我们又可以找到commit id了
git reset --hard commit_id

-- 撤销修改 最后一次commit的状态
git checkout -- <file>

git reset HEAD <file>

-- 删除文件

git rm readme.txt

git commit -m 'remove readme.txt'

-- git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
-- 如果因为误删除了这个文件我们可以用checkout的方式从远程中读取

Git checkout -- readme.txt

-- 从远程上面获取git库的内容 这个只是获取，并没有初始化，需要我们初始化后，同步到远程上面去
git remote add origin git@github.com:LianLuo/learngit.git
--git@github.com:LianLuo/learngit.git

git push -u origin master

-- 把本地库中的内容推送到远程，用git push命令，实际上就是把当前分支master推送到远程。
-- 由于远程库是空的，我们第一次推送master分支时，加上 -u 参数，Git不但会把本地的master分支内容推送到远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

-- 在使用git remote add origin git@github.com:LianLuo/learngit.git的时候可能会发生错误，fatal: Not a git repository (or any of the parent directories): .git
-- 出现这样的错误，你需要在你所在的目录进行 git init操作，初始化一下Git文件，就可以做上面的操作了。


-- 从远程库中克隆一个到本地
git clone git@github.com:LianLuo/learngit.git
-- 要克隆一个仓库，首先必须知道仓库地址，然后使用Git clone 命令克隆
-- Git 支持多种协议，包括https,但是通过ssh支持原生态git协议速度最快。

-- 创建并切换分支
git checkout -b dev

-- 也可以用下面的命令表示
git branch dev
git checkout dev

-- 用git branch 查看当前有多少分支
git branch

-- 在dev上面添加git_notebook.txt 并且 提交到dev本地分支
git add git_notebook.txt
git commit -m 'branch test'

git checkout master -- 切换到master分支
git merge dev -- 将dev分支合并到当前‘master’分支中。
git branch -d dev -- 删除dev分支
git branch -- 查看分支状态。

-- 总结
git branch -- 查看分支
git branch <name> -- 创建分支
git checkout <name> -- 切换分支
git checkout -b <name> -- 创建+切换分支
git merge <name> -- 合并某分支到当前分支
git merge --no-ff -m 'merge with no-ff' <name> -- 使用no-ff 合并分支，并添加合并信息。
git branch -b <name> -- 删除分支
git log --graph --pretty=online --abbrev-commit -- 查看分支合并情况

-- BUG分支，当前在DEV上面正开发，突然需要紧急修复BUG，但是代码没有提交，做了一半
git stash
git checkout master
git checkout -b issue-101
git add readme.txt
git commit -m 'fixed bug 101'
git checkout master
git merge --no-ff -m 'merged bug fix 101' issue-101
git branch -b issue-101\
git checkout dev
git stash list
git stash apply -- 恢复缓存内容，不删除缓存内容;使用git stash drop来进行删除
git stash pop -- 恢复缓存内容，并删除缓存内容。
-- 可可以缓存多次，用git stash list 查看，然后指定恢复某一次缓存 git stash apply stash@{0}